
CURT 2020 SECOND EVMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000157c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001688  08001688  00011688  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080016b0  080016b0  000116b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080016b4  080016b4  000116b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080016b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000d8  2000000c  080016c4  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000e4  080016c4  000200e4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008936  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001d28  00000000  00000000  0002896b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000328f  00000000  00000000  0002a693  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000678  00000000  00000000  0002d928  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000890  00000000  00000000  0002dfa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003d15  00000000  00000000  0002e830  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002370  00000000  00000000  00032545  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000348b5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001098  00000000  00000000  00034934  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001670 	.word	0x08001670

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001670 	.word	0x08001670

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 fab6 	bl	80006d4 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 fa6a 	bl	8000650 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 fa43 	bl	800062c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 f956 	bl	800145c <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000028 	.word	0x20000028
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000028 	.word	0x20000028

080001dc <HAL_ADC_ConvCpltCallback>:
 80001dc:	4770      	bx	lr

080001de <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80001de:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80001e0:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80001e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80001e4:	f012 0f50 	tst.w	r2, #80	; 0x50
 80001e8:	d11b      	bne.n	8000222 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80001ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80001ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80001f0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80001f2:	681a      	ldr	r2, [r3, #0]
 80001f4:	6892      	ldr	r2, [r2, #8]
 80001f6:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80001fa:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80001fe:	d10c      	bne.n	800021a <ADC_DMAConvCplt+0x3c>
 8000200:	7b1a      	ldrb	r2, [r3, #12]
 8000202:	b952      	cbnz	r2, 800021a <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000204:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000206:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800020a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800020c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800020e:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000210:	bf5e      	ittt	pl
 8000212:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8000214:	f042 0201 	orrpl.w	r2, r2, #1
 8000218:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800021a:	4618      	mov	r0, r3
 800021c:	f7ff ffde 	bl	80001dc <HAL_ADC_ConvCpltCallback>
 8000220:	bd10      	pop	{r4, pc}
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000222:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8000224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800022a:	4718      	bx	r3

0800022c <HAL_ADC_ConvHalfCpltCallback>:
 800022c:	4770      	bx	lr

0800022e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800022e:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000230:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000232:	f7ff fffb 	bl	800022c <HAL_ADC_ConvHalfCpltCallback>
 8000236:	bd08      	pop	{r3, pc}

08000238 <HAL_ADC_ErrorCallback>:
{
 8000238:	4770      	bx	lr

0800023a <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800023a:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800023c:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800023e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000244:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000246:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000248:	f043 0304 	orr.w	r3, r3, #4
 800024c:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800024e:	f7ff fff3 	bl	8000238 <HAL_ADC_ErrorCallback>
 8000252:	bd08      	pop	{r3, pc}

08000254 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000254:	2300      	movs	r3, #0
{ 
 8000256:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000258:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800025a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800025e:	2b01      	cmp	r3, #1
 8000260:	d074      	beq.n	800034c <HAL_ADC_ConfigChannel+0xf8>
 8000262:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8000264:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000266:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800026a:	2d06      	cmp	r5, #6
 800026c:	6802      	ldr	r2, [r0, #0]
 800026e:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000272:	680c      	ldr	r4, [r1, #0]
 8000274:	d825      	bhi.n	80002c2 <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000276:	442b      	add	r3, r5
 8000278:	251f      	movs	r5, #31
 800027a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800027c:	3b05      	subs	r3, #5
 800027e:	409d      	lsls	r5, r3
 8000280:	ea26 0505 	bic.w	r5, r6, r5
 8000284:	fa04 f303 	lsl.w	r3, r4, r3
 8000288:	432b      	orrs	r3, r5
 800028a:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800028c:	2c09      	cmp	r4, #9
 800028e:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000292:	688d      	ldr	r5, [r1, #8]
 8000294:	d92f      	bls.n	80002f6 <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000296:	2607      	movs	r6, #7
 8000298:	4423      	add	r3, r4
 800029a:	68d1      	ldr	r1, [r2, #12]
 800029c:	3b1e      	subs	r3, #30
 800029e:	409e      	lsls	r6, r3
 80002a0:	ea21 0106 	bic.w	r1, r1, r6
 80002a4:	fa05 f303 	lsl.w	r3, r5, r3
 80002a8:	430b      	orrs	r3, r1
 80002aa:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80002ac:	f1a4 0310 	sub.w	r3, r4, #16
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d92b      	bls.n	800030c <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80002b4:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 80002b6:	2200      	movs	r2, #0
 80002b8:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 80002bc:	4618      	mov	r0, r3
 80002be:	b002      	add	sp, #8
 80002c0:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80002c2:	2d0c      	cmp	r5, #12
 80002c4:	d80b      	bhi.n	80002de <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80002c6:	442b      	add	r3, r5
 80002c8:	251f      	movs	r5, #31
 80002ca:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80002cc:	3b23      	subs	r3, #35	; 0x23
 80002ce:	409d      	lsls	r5, r3
 80002d0:	ea26 0505 	bic.w	r5, r6, r5
 80002d4:	fa04 f303 	lsl.w	r3, r4, r3
 80002d8:	432b      	orrs	r3, r5
 80002da:	6313      	str	r3, [r2, #48]	; 0x30
 80002dc:	e7d6      	b.n	800028c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80002de:	442b      	add	r3, r5
 80002e0:	251f      	movs	r5, #31
 80002e2:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80002e4:	3b41      	subs	r3, #65	; 0x41
 80002e6:	409d      	lsls	r5, r3
 80002e8:	ea26 0505 	bic.w	r5, r6, r5
 80002ec:	fa04 f303 	lsl.w	r3, r4, r3
 80002f0:	432b      	orrs	r3, r5
 80002f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80002f4:	e7ca      	b.n	800028c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80002f6:	2607      	movs	r6, #7
 80002f8:	6911      	ldr	r1, [r2, #16]
 80002fa:	4423      	add	r3, r4
 80002fc:	409e      	lsls	r6, r3
 80002fe:	ea21 0106 	bic.w	r1, r1, r6
 8000302:	fa05 f303 	lsl.w	r3, r5, r3
 8000306:	430b      	orrs	r3, r1
 8000308:	6113      	str	r3, [r2, #16]
 800030a:	e7cf      	b.n	80002ac <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 800030c:	4b10      	ldr	r3, [pc, #64]	; (8000350 <HAL_ADC_ConfigChannel+0xfc>)
 800030e:	429a      	cmp	r2, r3
 8000310:	d116      	bne.n	8000340 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000312:	6893      	ldr	r3, [r2, #8]
 8000314:	021b      	lsls	r3, r3, #8
 8000316:	d4cd      	bmi.n	80002b4 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000318:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800031a:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800031c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000320:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000322:	d1c7      	bne.n	80002b4 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000324:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <HAL_ADC_ConfigChannel+0x100>)
 8000326:	4a0c      	ldr	r2, [pc, #48]	; (8000358 <HAL_ADC_ConfigChannel+0x104>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	fbb3 f2f2 	udiv	r2, r3, r2
 800032e:	230a      	movs	r3, #10
 8000330:	4353      	muls	r3, r2
            wait_loop_index--;
 8000332:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000334:	9b01      	ldr	r3, [sp, #4]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d0bc      	beq.n	80002b4 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 800033a:	9b01      	ldr	r3, [sp, #4]
 800033c:	3b01      	subs	r3, #1
 800033e:	e7f8      	b.n	8000332 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000340:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000342:	f043 0320 	orr.w	r3, r3, #32
 8000346:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000348:	2301      	movs	r3, #1
 800034a:	e7b4      	b.n	80002b6 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 800034c:	2302      	movs	r3, #2
 800034e:	e7b5      	b.n	80002bc <HAL_ADC_ConfigChannel+0x68>
 8000350:	40012400 	.word	0x40012400
 8000354:	20000008 	.word	0x20000008
 8000358:	000f4240 	.word	0x000f4240

0800035c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 800035c:	2300      	movs	r3, #0
{
 800035e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000360:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000362:	6803      	ldr	r3, [r0, #0]
{
 8000364:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000366:	689a      	ldr	r2, [r3, #8]
 8000368:	07d2      	lsls	r2, r2, #31
 800036a:	d502      	bpl.n	8000372 <ADC_Enable+0x16>
  return HAL_OK;
 800036c:	2000      	movs	r0, #0
}
 800036e:	b002      	add	sp, #8
 8000370:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000372:	689a      	ldr	r2, [r3, #8]
 8000374:	f042 0201 	orr.w	r2, r2, #1
 8000378:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800037a:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <ADC_Enable+0x68>)
 800037c:	4a12      	ldr	r2, [pc, #72]	; (80003c8 <ADC_Enable+0x6c>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000384:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000386:	9b01      	ldr	r3, [sp, #4]
 8000388:	b9c3      	cbnz	r3, 80003bc <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800038a:	f7ff ff21 	bl	80001d0 <HAL_GetTick>
 800038e:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000390:	6823      	ldr	r3, [r4, #0]
 8000392:	689d      	ldr	r5, [r3, #8]
 8000394:	f015 0501 	ands.w	r5, r5, #1
 8000398:	d1e8      	bne.n	800036c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800039a:	f7ff ff19 	bl	80001d0 <HAL_GetTick>
 800039e:	1b80      	subs	r0, r0, r6
 80003a0:	2802      	cmp	r0, #2
 80003a2:	d9f5      	bls.n	8000390 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80003a6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 80003b2:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80003ba:	e7d8      	b.n	800036e <ADC_Enable+0x12>
      wait_loop_index--;
 80003bc:	9b01      	ldr	r3, [sp, #4]
 80003be:	3b01      	subs	r3, #1
 80003c0:	e7e0      	b.n	8000384 <ADC_Enable+0x28>
 80003c2:	bf00      	nop
 80003c4:	20000008 	.word	0x20000008
 80003c8:	000f4240 	.word	0x000f4240

080003cc <HAL_ADC_Start_DMA>:
{
 80003cc:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 80003d0:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80003d2:	4b40      	ldr	r3, [pc, #256]	; (80004d4 <HAL_ADC_Start_DMA+0x108>)
 80003d4:	6802      	ldr	r2, [r0, #0]
{
 80003d6:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80003d8:	429a      	cmp	r2, r3
{
 80003da:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80003dc:	d002      	beq.n	80003e4 <HAL_ADC_Start_DMA+0x18>
 80003de:	493e      	ldr	r1, [pc, #248]	; (80004d8 <HAL_ADC_Start_DMA+0x10c>)
 80003e0:	428a      	cmp	r2, r1
 80003e2:	d103      	bne.n	80003ec <HAL_ADC_Start_DMA+0x20>
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80003ea:	d16e      	bne.n	80004ca <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 80003ec:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d06c      	beq.n	80004ce <HAL_ADC_Start_DMA+0x102>
 80003f4:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80003f6:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80003f8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80003fc:	f7ff ffae 	bl	800035c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000400:	4606      	mov	r6, r0
 8000402:	2800      	cmp	r0, #0
 8000404:	d15d      	bne.n	80004c2 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8000406:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000408:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 800040a:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800040e:	4b32      	ldr	r3, [pc, #200]	; (80004d8 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8000410:	f020 0001 	bic.w	r0, r0, #1
 8000414:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000418:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 800041a:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800041c:	d104      	bne.n	8000428 <HAL_ADC_Start_DMA+0x5c>
 800041e:	4a2d      	ldr	r2, [pc, #180]	; (80004d4 <HAL_ADC_Start_DMA+0x108>)
 8000420:	6853      	ldr	r3, [r2, #4]
 8000422:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000426:	d13e      	bne.n	80004a6 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000428:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800042a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800042e:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000430:	684b      	ldr	r3, [r1, #4]
 8000432:	055a      	lsls	r2, r3, #21
 8000434:	d505      	bpl.n	8000442 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000436:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000438:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800043c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000440:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000442:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000444:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000446:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800044a:	bf18      	it	ne
 800044c:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800044e:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000450:	bf18      	it	ne
 8000452:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8000456:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8000458:	2300      	movs	r3, #0
 800045a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800045e:	4b1f      	ldr	r3, [pc, #124]	; (80004dc <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000460:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000462:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000464:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <HAL_ADC_Start_DMA+0x114>)
 8000466:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000468:	4b1e      	ldr	r3, [pc, #120]	; (80004e4 <HAL_ADC_Start_DMA+0x118>)
 800046a:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800046c:	f06f 0302 	mvn.w	r3, #2
 8000470:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000474:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8000478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800047c:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000480:	4643      	mov	r3, r8
 8000482:	f000 f96d 	bl	8000760 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000486:	6823      	ldr	r3, [r4, #0]
 8000488:	689a      	ldr	r2, [r3, #8]
 800048a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800048e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000492:	689a      	ldr	r2, [r3, #8]
 8000494:	bf0c      	ite	eq
 8000496:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800049a:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 800049e:	609a      	str	r2, [r3, #8]
}
 80004a0:	4630      	mov	r0, r6
 80004a2:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80004a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80004a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004ac:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80004ae:	6853      	ldr	r3, [r2, #4]
 80004b0:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80004b2:	bf41      	itttt	mi
 80004b4:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 80004b6:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80004ba:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80004be:	62a0      	strmi	r0, [r4, #40]	; 0x28
 80004c0:	e7bf      	b.n	8000442 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 80004c2:	2300      	movs	r3, #0
 80004c4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80004c8:	e7ea      	b.n	80004a0 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 80004ca:	2601      	movs	r6, #1
 80004cc:	e7e8      	b.n	80004a0 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 80004ce:	2602      	movs	r6, #2
 80004d0:	e7e6      	b.n	80004a0 <HAL_ADC_Start_DMA+0xd4>
 80004d2:	bf00      	nop
 80004d4:	40012400 	.word	0x40012400
 80004d8:	40012800 	.word	0x40012800
 80004dc:	080001df 	.word	0x080001df
 80004e0:	0800022f 	.word	0x0800022f
 80004e4:	0800023b 	.word	0x0800023b

080004e8 <ADC_ConversionStop_Disable>:
{
 80004e8:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80004ea:	6803      	ldr	r3, [r0, #0]
{
 80004ec:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80004ee:	689a      	ldr	r2, [r3, #8]
 80004f0:	07d2      	lsls	r2, r2, #31
 80004f2:	d401      	bmi.n	80004f8 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80004f4:	2000      	movs	r0, #0
 80004f6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80004f8:	689a      	ldr	r2, [r3, #8]
 80004fa:	f022 0201 	bic.w	r2, r2, #1
 80004fe:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000500:	f7ff fe66 	bl	80001d0 <HAL_GetTick>
 8000504:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000506:	6823      	ldr	r3, [r4, #0]
 8000508:	689b      	ldr	r3, [r3, #8]
 800050a:	07db      	lsls	r3, r3, #31
 800050c:	d5f2      	bpl.n	80004f4 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800050e:	f7ff fe5f 	bl	80001d0 <HAL_GetTick>
 8000512:	1b40      	subs	r0, r0, r5
 8000514:	2802      	cmp	r0, #2
 8000516:	d9f6      	bls.n	8000506 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000518:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800051a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800051c:	f043 0310 	orr.w	r3, r3, #16
 8000520:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000522:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	62e3      	str	r3, [r4, #44]	; 0x2c
 800052a:	bd38      	pop	{r3, r4, r5, pc}

0800052c <HAL_ADC_Init>:
{
 800052c:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800052e:	4604      	mov	r4, r0
 8000530:	2800      	cmp	r0, #0
 8000532:	d071      	beq.n	8000618 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000534:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000536:	b923      	cbnz	r3, 8000542 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000538:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800053a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800053e:	f000 ffaf 	bl	80014a0 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000542:	4620      	mov	r0, r4
 8000544:	f7ff ffd0 	bl	80004e8 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000548:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800054a:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800054e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000550:	d164      	bne.n	800061c <HAL_ADC_Init+0xf0>
 8000552:	2800      	cmp	r0, #0
 8000554:	d162      	bne.n	800061c <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000556:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000558:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800055c:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800055e:	f023 0302 	bic.w	r3, r3, #2
 8000562:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000566:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000568:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800056a:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800056c:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800056e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000572:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000576:	d038      	beq.n	80005ea <HAL_ADC_Init+0xbe>
 8000578:	2901      	cmp	r1, #1
 800057a:	bf14      	ite	ne
 800057c:	4606      	movne	r6, r0
 800057e:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000582:	7d25      	ldrb	r5, [r4, #20]
 8000584:	2d01      	cmp	r5, #1
 8000586:	d107      	bne.n	8000598 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000588:	2b00      	cmp	r3, #0
 800058a:	d130      	bne.n	80005ee <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800058c:	69a3      	ldr	r3, [r4, #24]
 800058e:	3b01      	subs	r3, #1
 8000590:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000594:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000598:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800059a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800059e:	685d      	ldr	r5, [r3, #4]
 80005a0:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80005a4:	ea45 0506 	orr.w	r5, r5, r6
 80005a8:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80005aa:	689e      	ldr	r6, [r3, #8]
 80005ac:	4d1d      	ldr	r5, [pc, #116]	; (8000624 <HAL_ADC_Init+0xf8>)
 80005ae:	ea05 0506 	and.w	r5, r5, r6
 80005b2:	ea45 0502 	orr.w	r5, r5, r2
 80005b6:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80005b8:	d001      	beq.n	80005be <HAL_ADC_Init+0x92>
 80005ba:	2901      	cmp	r1, #1
 80005bc:	d120      	bne.n	8000600 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80005be:	6921      	ldr	r1, [r4, #16]
 80005c0:	3901      	subs	r1, #1
 80005c2:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80005c4:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80005c6:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80005ca:	4329      	orrs	r1, r5
 80005cc:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80005ce:	6899      	ldr	r1, [r3, #8]
 80005d0:	4b15      	ldr	r3, [pc, #84]	; (8000628 <HAL_ADC_Init+0xfc>)
 80005d2:	400b      	ands	r3, r1
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d115      	bne.n	8000604 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80005d8:	2300      	movs	r3, #0
 80005da:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80005dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80005de:	f023 0303 	bic.w	r3, r3, #3
 80005e2:	f043 0301 	orr.w	r3, r3, #1
 80005e6:	62a3      	str	r3, [r4, #40]	; 0x28
 80005e8:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80005ea:	460e      	mov	r6, r1
 80005ec:	e7c9      	b.n	8000582 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80005ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80005f0:	f043 0320 	orr.w	r3, r3, #32
 80005f4:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80005fe:	e7cb      	b.n	8000598 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000600:	2100      	movs	r1, #0
 8000602:	e7df      	b.n	80005c4 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000604:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000606:	f023 0312 	bic.w	r3, r3, #18
 800060a:	f043 0310 	orr.w	r3, r3, #16
 800060e:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000610:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000618:	2001      	movs	r0, #1
}
 800061a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800061c:	f043 0310 	orr.w	r3, r3, #16
 8000620:	62a3      	str	r3, [r4, #40]	; 0x28
 8000622:	e7f9      	b.n	8000618 <HAL_ADC_Init+0xec>
 8000624:	ffe1f7fd 	.word	0xffe1f7fd
 8000628:	ff1f0efe 	.word	0xff1f0efe

0800062c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800062c:	4a07      	ldr	r2, [pc, #28]	; (800064c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800062e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000630:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000632:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000636:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800063a:	041b      	lsls	r3, r3, #16
 800063c:	0c1b      	lsrs	r3, r3, #16
 800063e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000646:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000648:	60d3      	str	r3, [r2, #12]
 800064a:	4770      	bx	lr
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000650:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	68dc      	ldr	r4, [r3, #12]
 8000656:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800065a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800065e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000660:	2b04      	cmp	r3, #4
 8000662:	bf28      	it	cs
 8000664:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000666:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000668:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800066c:	bf98      	it	ls
 800066e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000670:	fa05 f303 	lsl.w	r3, r5, r3
 8000674:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000678:	bf88      	it	hi
 800067a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	4019      	ands	r1, r3
 800067e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000680:	fa05 f404 	lsl.w	r4, r5, r4
 8000684:	3c01      	subs	r4, #1
 8000686:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000688:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068a:	ea42 0201 	orr.w	r2, r2, r1
 800068e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000692:	bfa9      	itett	ge
 8000694:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000698:	4b06      	ldrlt	r3, [pc, #24]	; (80006b4 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069a:	b2d2      	uxtbge	r2, r2
 800069c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a0:	bfbb      	ittet	lt
 80006a2:	f000 000f 	andlt.w	r0, r0, #15
 80006a6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	541a      	strblt	r2, [r3, r0]
 80006ae:	bd30      	pop	{r4, r5, pc}
 80006b0:	e000ed00 	.word	0xe000ed00
 80006b4:	e000ed14 	.word	0xe000ed14

080006b8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006b8:	2800      	cmp	r0, #0
 80006ba:	db08      	blt.n	80006ce <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006bc:	2301      	movs	r3, #1
 80006be:	0942      	lsrs	r2, r0, #5
 80006c0:	f000 001f 	and.w	r0, r0, #31
 80006c4:	fa03 f000 	lsl.w	r0, r3, r0
 80006c8:	4b01      	ldr	r3, [pc, #4]	; (80006d0 <HAL_NVIC_EnableIRQ+0x18>)
 80006ca:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006ce:	4770      	bx	lr
 80006d0:	e000e100 	.word	0xe000e100

080006d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006d4:	3801      	subs	r0, #1
 80006d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006da:	d20a      	bcs.n	80006f2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006dc:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	4a06      	ldr	r2, [pc, #24]	; (80006fc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006e2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ea:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006ec:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006f2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	e000e010 	.word	0xe000e010
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000700:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000702:	b330      	cbz	r0, 8000752 <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000704:	2214      	movs	r2, #20
 8000706:	6801      	ldr	r1, [r0, #0]
 8000708:	4b13      	ldr	r3, [pc, #76]	; (8000758 <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800070a:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800070c:	440b      	add	r3, r1
 800070e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8000718:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 800071a:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 800071c:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800071e:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 8000722:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000724:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000726:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800072a:	4323      	orrs	r3, r4
 800072c:	6904      	ldr	r4, [r0, #16]
 800072e:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000730:	6944      	ldr	r4, [r0, #20]
 8000732:	4323      	orrs	r3, r4
 8000734:	6984      	ldr	r4, [r0, #24]
 8000736:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000738:	69c4      	ldr	r4, [r0, #28]
 800073a:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800073c:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800073e:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000740:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000742:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000744:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000748:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800074a:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 800074e:	4618      	mov	r0, r3
 8000750:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000752:	2001      	movs	r0, #1
}
 8000754:	bd10      	pop	{r4, pc}
 8000756:	bf00      	nop
 8000758:	bffdfff8 	.word	0xbffdfff8
 800075c:	40020000 	.word	0x40020000

08000760 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000760:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000762:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000766:	2c01      	cmp	r4, #1
 8000768:	d035      	beq.n	80007d6 <HAL_DMA_Start_IT+0x76>
 800076a:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800076c:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000770:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000774:	42a5      	cmp	r5, r4
 8000776:	f04f 0600 	mov.w	r6, #0
 800077a:	f04f 0402 	mov.w	r4, #2
 800077e:	d128      	bne.n	80007d2 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000780:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000784:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000786:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000788:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800078a:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 800078c:	f026 0601 	bic.w	r6, r6, #1
 8000790:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000792:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000794:	40bd      	lsls	r5, r7
 8000796:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000798:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800079a:	6843      	ldr	r3, [r0, #4]
 800079c:	6805      	ldr	r5, [r0, #0]
 800079e:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 80007a0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80007a2:	bf0b      	itete	eq
 80007a4:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80007a6:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80007a8:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80007aa:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80007ac:	b14b      	cbz	r3, 80007c2 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80007ae:	6823      	ldr	r3, [r4, #0]
 80007b0:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80007b4:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80007b6:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80007b8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	602b      	str	r3, [r5, #0]
 80007c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80007c2:	6823      	ldr	r3, [r4, #0]
 80007c4:	f023 0304 	bic.w	r3, r3, #4
 80007c8:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80007ca:	6823      	ldr	r3, [r4, #0]
 80007cc:	f043 030a 	orr.w	r3, r3, #10
 80007d0:	e7f0      	b.n	80007b4 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 80007d2:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80007d6:	2002      	movs	r0, #2
}
 80007d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080007dc <HAL_DMA_IRQHandler>:
{
 80007dc:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80007de:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80007e0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80007e2:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80007e4:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80007e6:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80007e8:	4095      	lsls	r5, r2
 80007ea:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80007ec:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80007ee:	d032      	beq.n	8000856 <HAL_DMA_IRQHandler+0x7a>
 80007f0:	074d      	lsls	r5, r1, #29
 80007f2:	d530      	bpl.n	8000856 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80007f8:	bf5e      	ittt	pl
 80007fa:	681a      	ldrpl	r2, [r3, #0]
 80007fc:	f022 0204 	bicpl.w	r2, r2, #4
 8000800:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000802:	4a3e      	ldr	r2, [pc, #248]	; (80008fc <HAL_DMA_IRQHandler+0x120>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d019      	beq.n	800083c <HAL_DMA_IRQHandler+0x60>
 8000808:	3214      	adds	r2, #20
 800080a:	4293      	cmp	r3, r2
 800080c:	d018      	beq.n	8000840 <HAL_DMA_IRQHandler+0x64>
 800080e:	3214      	adds	r2, #20
 8000810:	4293      	cmp	r3, r2
 8000812:	d017      	beq.n	8000844 <HAL_DMA_IRQHandler+0x68>
 8000814:	3214      	adds	r2, #20
 8000816:	4293      	cmp	r3, r2
 8000818:	d017      	beq.n	800084a <HAL_DMA_IRQHandler+0x6e>
 800081a:	3214      	adds	r2, #20
 800081c:	4293      	cmp	r3, r2
 800081e:	d017      	beq.n	8000850 <HAL_DMA_IRQHandler+0x74>
 8000820:	3214      	adds	r2, #20
 8000822:	4293      	cmp	r3, r2
 8000824:	bf0c      	ite	eq
 8000826:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800082a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800082e:	4a34      	ldr	r2, [pc, #208]	; (8000900 <HAL_DMA_IRQHandler+0x124>)
 8000830:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000832:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000834:	2b00      	cmp	r3, #0
 8000836:	d05e      	beq.n	80008f6 <HAL_DMA_IRQHandler+0x11a>
}
 8000838:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800083a:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800083c:	2304      	movs	r3, #4
 800083e:	e7f6      	b.n	800082e <HAL_DMA_IRQHandler+0x52>
 8000840:	2340      	movs	r3, #64	; 0x40
 8000842:	e7f4      	b.n	800082e <HAL_DMA_IRQHandler+0x52>
 8000844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000848:	e7f1      	b.n	800082e <HAL_DMA_IRQHandler+0x52>
 800084a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800084e:	e7ee      	b.n	800082e <HAL_DMA_IRQHandler+0x52>
 8000850:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000854:	e7eb      	b.n	800082e <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000856:	2502      	movs	r5, #2
 8000858:	4095      	lsls	r5, r2
 800085a:	4225      	tst	r5, r4
 800085c:	d035      	beq.n	80008ca <HAL_DMA_IRQHandler+0xee>
 800085e:	078d      	lsls	r5, r1, #30
 8000860:	d533      	bpl.n	80008ca <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	0694      	lsls	r4, r2, #26
 8000866:	d406      	bmi.n	8000876 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	f022 020a 	bic.w	r2, r2, #10
 800086e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000870:	2201      	movs	r2, #1
 8000872:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000876:	4a21      	ldr	r2, [pc, #132]	; (80008fc <HAL_DMA_IRQHandler+0x120>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d019      	beq.n	80008b0 <HAL_DMA_IRQHandler+0xd4>
 800087c:	3214      	adds	r2, #20
 800087e:	4293      	cmp	r3, r2
 8000880:	d018      	beq.n	80008b4 <HAL_DMA_IRQHandler+0xd8>
 8000882:	3214      	adds	r2, #20
 8000884:	4293      	cmp	r3, r2
 8000886:	d017      	beq.n	80008b8 <HAL_DMA_IRQHandler+0xdc>
 8000888:	3214      	adds	r2, #20
 800088a:	4293      	cmp	r3, r2
 800088c:	d017      	beq.n	80008be <HAL_DMA_IRQHandler+0xe2>
 800088e:	3214      	adds	r2, #20
 8000890:	4293      	cmp	r3, r2
 8000892:	d017      	beq.n	80008c4 <HAL_DMA_IRQHandler+0xe8>
 8000894:	3214      	adds	r2, #20
 8000896:	4293      	cmp	r3, r2
 8000898:	bf0c      	ite	eq
 800089a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800089e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80008a2:	4a17      	ldr	r2, [pc, #92]	; (8000900 <HAL_DMA_IRQHandler+0x124>)
 80008a4:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80008a6:	2300      	movs	r3, #0
 80008a8:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80008ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80008ae:	e7c1      	b.n	8000834 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80008b0:	2302      	movs	r3, #2
 80008b2:	e7f6      	b.n	80008a2 <HAL_DMA_IRQHandler+0xc6>
 80008b4:	2320      	movs	r3, #32
 80008b6:	e7f4      	b.n	80008a2 <HAL_DMA_IRQHandler+0xc6>
 80008b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008bc:	e7f1      	b.n	80008a2 <HAL_DMA_IRQHandler+0xc6>
 80008be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c2:	e7ee      	b.n	80008a2 <HAL_DMA_IRQHandler+0xc6>
 80008c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008c8:	e7eb      	b.n	80008a2 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80008ca:	2508      	movs	r5, #8
 80008cc:	4095      	lsls	r5, r2
 80008ce:	4225      	tst	r5, r4
 80008d0:	d011      	beq.n	80008f6 <HAL_DMA_IRQHandler+0x11a>
 80008d2:	0709      	lsls	r1, r1, #28
 80008d4:	d50f      	bpl.n	80008f6 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008d6:	6819      	ldr	r1, [r3, #0]
 80008d8:	f021 010e 	bic.w	r1, r1, #14
 80008dc:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80008de:	2301      	movs	r3, #1
 80008e0:	fa03 f202 	lsl.w	r2, r3, r2
 80008e4:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80008e6:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80008e8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80008ec:	2300      	movs	r3, #0
 80008ee:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80008f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80008f4:	e79e      	b.n	8000834 <HAL_DMA_IRQHandler+0x58>
}
 80008f6:	bc70      	pop	{r4, r5, r6}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40020008 	.word	0x40020008
 8000900:	40020000 	.word	0x40020000

08000904 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000904:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000908:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800090a:	4626      	mov	r6, r4
 800090c:	4b66      	ldr	r3, [pc, #408]	; (8000aa8 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800090e:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000ab8 <HAL_GPIO_Init+0x1b4>
 8000912:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000abc <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000916:	680a      	ldr	r2, [r1, #0]
 8000918:	fa32 f506 	lsrs.w	r5, r2, r6
 800091c:	d102      	bne.n	8000924 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 800091e:	b003      	add	sp, #12
 8000920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000924:	f04f 0801 	mov.w	r8, #1
 8000928:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800092c:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000930:	4590      	cmp	r8, r2
 8000932:	d17f      	bne.n	8000a34 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000934:	684d      	ldr	r5, [r1, #4]
 8000936:	2d12      	cmp	r5, #18
 8000938:	f000 80aa 	beq.w	8000a90 <HAL_GPIO_Init+0x18c>
 800093c:	f200 8083 	bhi.w	8000a46 <HAL_GPIO_Init+0x142>
 8000940:	2d02      	cmp	r5, #2
 8000942:	f000 80a2 	beq.w	8000a8a <HAL_GPIO_Init+0x186>
 8000946:	d877      	bhi.n	8000a38 <HAL_GPIO_Init+0x134>
 8000948:	2d00      	cmp	r5, #0
 800094a:	f000 8089 	beq.w	8000a60 <HAL_GPIO_Init+0x15c>
 800094e:	2d01      	cmp	r5, #1
 8000950:	f000 8099 	beq.w	8000a86 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000954:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000958:	2aff      	cmp	r2, #255	; 0xff
 800095a:	bf93      	iteet	ls
 800095c:	4682      	movls	sl, r0
 800095e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000962:	3d08      	subhi	r5, #8
 8000964:	f8d0 b000 	ldrls.w	fp, [r0]
 8000968:	bf92      	itee	ls
 800096a:	00b5      	lslls	r5, r6, #2
 800096c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000970:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000972:	fa09 f805 	lsl.w	r8, r9, r5
 8000976:	ea2b 0808 	bic.w	r8, fp, r8
 800097a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800097e:	bf88      	it	hi
 8000980:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000984:	ea48 0505 	orr.w	r5, r8, r5
 8000988:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800098c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000990:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000994:	d04e      	beq.n	8000a34 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000996:	4d45      	ldr	r5, [pc, #276]	; (8000aac <HAL_GPIO_Init+0x1a8>)
 8000998:	4f44      	ldr	r7, [pc, #272]	; (8000aac <HAL_GPIO_Init+0x1a8>)
 800099a:	69ad      	ldr	r5, [r5, #24]
 800099c:	f026 0803 	bic.w	r8, r6, #3
 80009a0:	f045 0501 	orr.w	r5, r5, #1
 80009a4:	61bd      	str	r5, [r7, #24]
 80009a6:	69bd      	ldr	r5, [r7, #24]
 80009a8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80009ac:	f005 0501 	and.w	r5, r5, #1
 80009b0:	9501      	str	r5, [sp, #4]
 80009b2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009b6:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009ba:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009bc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80009c0:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009c4:	fa09 f90b 	lsl.w	r9, r9, fp
 80009c8:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009cc:	4d38      	ldr	r5, [pc, #224]	; (8000ab0 <HAL_GPIO_Init+0x1ac>)
 80009ce:	42a8      	cmp	r0, r5
 80009d0:	d063      	beq.n	8000a9a <HAL_GPIO_Init+0x196>
 80009d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80009d6:	42a8      	cmp	r0, r5
 80009d8:	d061      	beq.n	8000a9e <HAL_GPIO_Init+0x19a>
 80009da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80009de:	42a8      	cmp	r0, r5
 80009e0:	d05f      	beq.n	8000aa2 <HAL_GPIO_Init+0x19e>
 80009e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80009e6:	42a8      	cmp	r0, r5
 80009e8:	bf0c      	ite	eq
 80009ea:	2503      	moveq	r5, #3
 80009ec:	2504      	movne	r5, #4
 80009ee:	fa05 f50b 	lsl.w	r5, r5, fp
 80009f2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80009f6:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80009fa:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009fc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000a00:	bf14      	ite	ne
 8000a02:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a04:	4395      	biceq	r5, r2
 8000a06:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000a08:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a0a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000a0e:	bf14      	ite	ne
 8000a10:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a12:	4395      	biceq	r5, r2
 8000a14:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a16:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a18:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a1c:	bf14      	ite	ne
 8000a1e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a20:	4395      	biceq	r5, r2
 8000a22:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a24:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a26:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a2a:	bf14      	ite	ne
 8000a2c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a2e:	ea25 0202 	biceq.w	r2, r5, r2
 8000a32:	60da      	str	r2, [r3, #12]
	position++;
 8000a34:	3601      	adds	r6, #1
 8000a36:	e76e      	b.n	8000916 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000a38:	2d03      	cmp	r5, #3
 8000a3a:	d022      	beq.n	8000a82 <HAL_GPIO_Init+0x17e>
 8000a3c:	2d11      	cmp	r5, #17
 8000a3e:	d189      	bne.n	8000954 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a40:	68cc      	ldr	r4, [r1, #12]
 8000a42:	3404      	adds	r4, #4
          break;
 8000a44:	e786      	b.n	8000954 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000a46:	4f1b      	ldr	r7, [pc, #108]	; (8000ab4 <HAL_GPIO_Init+0x1b0>)
 8000a48:	42bd      	cmp	r5, r7
 8000a4a:	d009      	beq.n	8000a60 <HAL_GPIO_Init+0x15c>
 8000a4c:	d812      	bhi.n	8000a74 <HAL_GPIO_Init+0x170>
 8000a4e:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000ac0 <HAL_GPIO_Init+0x1bc>
 8000a52:	454d      	cmp	r5, r9
 8000a54:	d004      	beq.n	8000a60 <HAL_GPIO_Init+0x15c>
 8000a56:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000a5a:	454d      	cmp	r5, r9
 8000a5c:	f47f af7a 	bne.w	8000954 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a60:	688c      	ldr	r4, [r1, #8]
 8000a62:	b1c4      	cbz	r4, 8000a96 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a64:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000a66:	bf0c      	ite	eq
 8000a68:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000a6c:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a70:	2408      	movs	r4, #8
 8000a72:	e76f      	b.n	8000954 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000a74:	4575      	cmp	r5, lr
 8000a76:	d0f3      	beq.n	8000a60 <HAL_GPIO_Init+0x15c>
 8000a78:	4565      	cmp	r5, ip
 8000a7a:	d0f1      	beq.n	8000a60 <HAL_GPIO_Init+0x15c>
 8000a7c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000ac4 <HAL_GPIO_Init+0x1c0>
 8000a80:	e7eb      	b.n	8000a5a <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a82:	2400      	movs	r4, #0
 8000a84:	e766      	b.n	8000954 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a86:	68cc      	ldr	r4, [r1, #12]
          break;
 8000a88:	e764      	b.n	8000954 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a8a:	68cc      	ldr	r4, [r1, #12]
 8000a8c:	3408      	adds	r4, #8
          break;
 8000a8e:	e761      	b.n	8000954 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a90:	68cc      	ldr	r4, [r1, #12]
 8000a92:	340c      	adds	r4, #12
          break;
 8000a94:	e75e      	b.n	8000954 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a96:	2404      	movs	r4, #4
 8000a98:	e75c      	b.n	8000954 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a9a:	2500      	movs	r5, #0
 8000a9c:	e7a7      	b.n	80009ee <HAL_GPIO_Init+0xea>
 8000a9e:	2501      	movs	r5, #1
 8000aa0:	e7a5      	b.n	80009ee <HAL_GPIO_Init+0xea>
 8000aa2:	2502      	movs	r5, #2
 8000aa4:	e7a3      	b.n	80009ee <HAL_GPIO_Init+0xea>
 8000aa6:	bf00      	nop
 8000aa8:	40010400 	.word	0x40010400
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40010800 	.word	0x40010800
 8000ab4:	10210000 	.word	0x10210000
 8000ab8:	10310000 	.word	0x10310000
 8000abc:	10320000 	.word	0x10320000
 8000ac0:	10110000 	.word	0x10110000
 8000ac4:	10220000 	.word	0x10220000

08000ac8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ac8:	6883      	ldr	r3, [r0, #8]
 8000aca:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000acc:	bf14      	ite	ne
 8000ace:	2001      	movne	r0, #1
 8000ad0:	2000      	moveq	r0, #0
 8000ad2:	4770      	bx	lr

08000ad4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ad4:	b10a      	cbz	r2, 8000ada <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ad6:	6101      	str	r1, [r0, #16]
 8000ad8:	4770      	bx	lr
 8000ada:	0409      	lsls	r1, r1, #16
 8000adc:	e7fb      	b.n	8000ad6 <HAL_GPIO_WritePin+0x2>
	...

08000ae0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ae0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ae4:	4605      	mov	r5, r0
 8000ae6:	b908      	cbnz	r0, 8000aec <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000ae8:	2001      	movs	r0, #1
 8000aea:	e03c      	b.n	8000b66 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aec:	6803      	ldr	r3, [r0, #0]
 8000aee:	07db      	lsls	r3, r3, #31
 8000af0:	d410      	bmi.n	8000b14 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000af2:	682b      	ldr	r3, [r5, #0]
 8000af4:	079f      	lsls	r7, r3, #30
 8000af6:	d45d      	bmi.n	8000bb4 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000af8:	682b      	ldr	r3, [r5, #0]
 8000afa:	0719      	lsls	r1, r3, #28
 8000afc:	f100 8094 	bmi.w	8000c28 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b00:	682b      	ldr	r3, [r5, #0]
 8000b02:	075a      	lsls	r2, r3, #29
 8000b04:	f100 80be 	bmi.w	8000c84 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b08:	69e8      	ldr	r0, [r5, #28]
 8000b0a:	2800      	cmp	r0, #0
 8000b0c:	f040 812c 	bne.w	8000d68 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000b10:	2000      	movs	r0, #0
 8000b12:	e028      	b.n	8000b66 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b14:	4c8f      	ldr	r4, [pc, #572]	; (8000d54 <HAL_RCC_OscConfig+0x274>)
 8000b16:	6863      	ldr	r3, [r4, #4]
 8000b18:	f003 030c 	and.w	r3, r3, #12
 8000b1c:	2b04      	cmp	r3, #4
 8000b1e:	d007      	beq.n	8000b30 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b20:	6863      	ldr	r3, [r4, #4]
 8000b22:	f003 030c 	and.w	r3, r3, #12
 8000b26:	2b08      	cmp	r3, #8
 8000b28:	d109      	bne.n	8000b3e <HAL_RCC_OscConfig+0x5e>
 8000b2a:	6863      	ldr	r3, [r4, #4]
 8000b2c:	03de      	lsls	r6, r3, #15
 8000b2e:	d506      	bpl.n	8000b3e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b30:	6823      	ldr	r3, [r4, #0]
 8000b32:	039c      	lsls	r4, r3, #14
 8000b34:	d5dd      	bpl.n	8000af2 <HAL_RCC_OscConfig+0x12>
 8000b36:	686b      	ldr	r3, [r5, #4]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d1da      	bne.n	8000af2 <HAL_RCC_OscConfig+0x12>
 8000b3c:	e7d4      	b.n	8000ae8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b3e:	686b      	ldr	r3, [r5, #4]
 8000b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b44:	d112      	bne.n	8000b6c <HAL_RCC_OscConfig+0x8c>
 8000b46:	6823      	ldr	r3, [r4, #0]
 8000b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b4c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b4e:	f7ff fb3f 	bl	80001d0 <HAL_GetTick>
 8000b52:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b54:	6823      	ldr	r3, [r4, #0]
 8000b56:	0398      	lsls	r0, r3, #14
 8000b58:	d4cb      	bmi.n	8000af2 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b5a:	f7ff fb39 	bl	80001d0 <HAL_GetTick>
 8000b5e:	1b80      	subs	r0, r0, r6
 8000b60:	2864      	cmp	r0, #100	; 0x64
 8000b62:	d9f7      	bls.n	8000b54 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000b64:	2003      	movs	r0, #3
}
 8000b66:	b002      	add	sp, #8
 8000b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b6c:	b99b      	cbnz	r3, 8000b96 <HAL_RCC_OscConfig+0xb6>
 8000b6e:	6823      	ldr	r3, [r4, #0]
 8000b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b74:	6023      	str	r3, [r4, #0]
 8000b76:	6823      	ldr	r3, [r4, #0]
 8000b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b7c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b7e:	f7ff fb27 	bl	80001d0 <HAL_GetTick>
 8000b82:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b84:	6823      	ldr	r3, [r4, #0]
 8000b86:	0399      	lsls	r1, r3, #14
 8000b88:	d5b3      	bpl.n	8000af2 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b8a:	f7ff fb21 	bl	80001d0 <HAL_GetTick>
 8000b8e:	1b80      	subs	r0, r0, r6
 8000b90:	2864      	cmp	r0, #100	; 0x64
 8000b92:	d9f7      	bls.n	8000b84 <HAL_RCC_OscConfig+0xa4>
 8000b94:	e7e6      	b.n	8000b64 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b9a:	6823      	ldr	r3, [r4, #0]
 8000b9c:	d103      	bne.n	8000ba6 <HAL_RCC_OscConfig+0xc6>
 8000b9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ba2:	6023      	str	r3, [r4, #0]
 8000ba4:	e7cf      	b.n	8000b46 <HAL_RCC_OscConfig+0x66>
 8000ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000baa:	6023      	str	r3, [r4, #0]
 8000bac:	6823      	ldr	r3, [r4, #0]
 8000bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bb2:	e7cb      	b.n	8000b4c <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bb4:	4c67      	ldr	r4, [pc, #412]	; (8000d54 <HAL_RCC_OscConfig+0x274>)
 8000bb6:	6863      	ldr	r3, [r4, #4]
 8000bb8:	f013 0f0c 	tst.w	r3, #12
 8000bbc:	d007      	beq.n	8000bce <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000bbe:	6863      	ldr	r3, [r4, #4]
 8000bc0:	f003 030c 	and.w	r3, r3, #12
 8000bc4:	2b08      	cmp	r3, #8
 8000bc6:	d110      	bne.n	8000bea <HAL_RCC_OscConfig+0x10a>
 8000bc8:	6863      	ldr	r3, [r4, #4]
 8000bca:	03da      	lsls	r2, r3, #15
 8000bcc:	d40d      	bmi.n	8000bea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bce:	6823      	ldr	r3, [r4, #0]
 8000bd0:	079b      	lsls	r3, r3, #30
 8000bd2:	d502      	bpl.n	8000bda <HAL_RCC_OscConfig+0xfa>
 8000bd4:	692b      	ldr	r3, [r5, #16]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d186      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bda:	6823      	ldr	r3, [r4, #0]
 8000bdc:	696a      	ldr	r2, [r5, #20]
 8000bde:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000be2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000be6:	6023      	str	r3, [r4, #0]
 8000be8:	e786      	b.n	8000af8 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bea:	692a      	ldr	r2, [r5, #16]
 8000bec:	4b5a      	ldr	r3, [pc, #360]	; (8000d58 <HAL_RCC_OscConfig+0x278>)
 8000bee:	b16a      	cbz	r2, 8000c0c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bf4:	f7ff faec 	bl	80001d0 <HAL_GetTick>
 8000bf8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bfa:	6823      	ldr	r3, [r4, #0]
 8000bfc:	079f      	lsls	r7, r3, #30
 8000bfe:	d4ec      	bmi.n	8000bda <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c00:	f7ff fae6 	bl	80001d0 <HAL_GetTick>
 8000c04:	1b80      	subs	r0, r0, r6
 8000c06:	2802      	cmp	r0, #2
 8000c08:	d9f7      	bls.n	8000bfa <HAL_RCC_OscConfig+0x11a>
 8000c0a:	e7ab      	b.n	8000b64 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000c0c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c0e:	f7ff fadf 	bl	80001d0 <HAL_GetTick>
 8000c12:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c14:	6823      	ldr	r3, [r4, #0]
 8000c16:	0798      	lsls	r0, r3, #30
 8000c18:	f57f af6e 	bpl.w	8000af8 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c1c:	f7ff fad8 	bl	80001d0 <HAL_GetTick>
 8000c20:	1b80      	subs	r0, r0, r6
 8000c22:	2802      	cmp	r0, #2
 8000c24:	d9f6      	bls.n	8000c14 <HAL_RCC_OscConfig+0x134>
 8000c26:	e79d      	b.n	8000b64 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c28:	69aa      	ldr	r2, [r5, #24]
 8000c2a:	4c4a      	ldr	r4, [pc, #296]	; (8000d54 <HAL_RCC_OscConfig+0x274>)
 8000c2c:	4b4b      	ldr	r3, [pc, #300]	; (8000d5c <HAL_RCC_OscConfig+0x27c>)
 8000c2e:	b1da      	cbz	r2, 8000c68 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000c30:	2201      	movs	r2, #1
 8000c32:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c34:	f7ff facc 	bl	80001d0 <HAL_GetTick>
 8000c38:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c3c:	079b      	lsls	r3, r3, #30
 8000c3e:	d50d      	bpl.n	8000c5c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000c40:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000c44:	4b46      	ldr	r3, [pc, #280]	; (8000d60 <HAL_RCC_OscConfig+0x280>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c4c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000c4e:	bf00      	nop
  }
  while (Delay --);
 8000c50:	9b01      	ldr	r3, [sp, #4]
 8000c52:	1e5a      	subs	r2, r3, #1
 8000c54:	9201      	str	r2, [sp, #4]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1f9      	bne.n	8000c4e <HAL_RCC_OscConfig+0x16e>
 8000c5a:	e751      	b.n	8000b00 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c5c:	f7ff fab8 	bl	80001d0 <HAL_GetTick>
 8000c60:	1b80      	subs	r0, r0, r6
 8000c62:	2802      	cmp	r0, #2
 8000c64:	d9e9      	bls.n	8000c3a <HAL_RCC_OscConfig+0x15a>
 8000c66:	e77d      	b.n	8000b64 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000c68:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c6a:	f7ff fab1 	bl	80001d0 <HAL_GetTick>
 8000c6e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c72:	079f      	lsls	r7, r3, #30
 8000c74:	f57f af44 	bpl.w	8000b00 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c78:	f7ff faaa 	bl	80001d0 <HAL_GetTick>
 8000c7c:	1b80      	subs	r0, r0, r6
 8000c7e:	2802      	cmp	r0, #2
 8000c80:	d9f6      	bls.n	8000c70 <HAL_RCC_OscConfig+0x190>
 8000c82:	e76f      	b.n	8000b64 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c84:	4c33      	ldr	r4, [pc, #204]	; (8000d54 <HAL_RCC_OscConfig+0x274>)
 8000c86:	69e3      	ldr	r3, [r4, #28]
 8000c88:	00d8      	lsls	r0, r3, #3
 8000c8a:	d424      	bmi.n	8000cd6 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000c8c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c8e:	69e3      	ldr	r3, [r4, #28]
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	61e3      	str	r3, [r4, #28]
 8000c96:	69e3      	ldr	r3, [r4, #28]
 8000c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ca0:	4e30      	ldr	r6, [pc, #192]	; (8000d64 <HAL_RCC_OscConfig+0x284>)
 8000ca2:	6833      	ldr	r3, [r6, #0]
 8000ca4:	05d9      	lsls	r1, r3, #23
 8000ca6:	d518      	bpl.n	8000cda <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ca8:	68eb      	ldr	r3, [r5, #12]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d126      	bne.n	8000cfc <HAL_RCC_OscConfig+0x21c>
 8000cae:	6a23      	ldr	r3, [r4, #32]
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000cb6:	f7ff fa8b 	bl	80001d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cba:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000cbe:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cc0:	6a23      	ldr	r3, [r4, #32]
 8000cc2:	079b      	lsls	r3, r3, #30
 8000cc4:	d53f      	bpl.n	8000d46 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000cc6:	2f00      	cmp	r7, #0
 8000cc8:	f43f af1e 	beq.w	8000b08 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ccc:	69e3      	ldr	r3, [r4, #28]
 8000cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	61e3      	str	r3, [r4, #28]
 8000cd4:	e718      	b.n	8000b08 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000cd6:	2700      	movs	r7, #0
 8000cd8:	e7e2      	b.n	8000ca0 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cda:	6833      	ldr	r3, [r6, #0]
 8000cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000ce2:	f7ff fa75 	bl	80001d0 <HAL_GetTick>
 8000ce6:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ce8:	6833      	ldr	r3, [r6, #0]
 8000cea:	05da      	lsls	r2, r3, #23
 8000cec:	d4dc      	bmi.n	8000ca8 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cee:	f7ff fa6f 	bl	80001d0 <HAL_GetTick>
 8000cf2:	eba0 0008 	sub.w	r0, r0, r8
 8000cf6:	2864      	cmp	r0, #100	; 0x64
 8000cf8:	d9f6      	bls.n	8000ce8 <HAL_RCC_OscConfig+0x208>
 8000cfa:	e733      	b.n	8000b64 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cfc:	b9ab      	cbnz	r3, 8000d2a <HAL_RCC_OscConfig+0x24a>
 8000cfe:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d00:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d04:	f023 0301 	bic.w	r3, r3, #1
 8000d08:	6223      	str	r3, [r4, #32]
 8000d0a:	6a23      	ldr	r3, [r4, #32]
 8000d0c:	f023 0304 	bic.w	r3, r3, #4
 8000d10:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000d12:	f7ff fa5d 	bl	80001d0 <HAL_GetTick>
 8000d16:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d18:	6a23      	ldr	r3, [r4, #32]
 8000d1a:	0798      	lsls	r0, r3, #30
 8000d1c:	d5d3      	bpl.n	8000cc6 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d1e:	f7ff fa57 	bl	80001d0 <HAL_GetTick>
 8000d22:	1b80      	subs	r0, r0, r6
 8000d24:	4540      	cmp	r0, r8
 8000d26:	d9f7      	bls.n	8000d18 <HAL_RCC_OscConfig+0x238>
 8000d28:	e71c      	b.n	8000b64 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d2a:	2b05      	cmp	r3, #5
 8000d2c:	6a23      	ldr	r3, [r4, #32]
 8000d2e:	d103      	bne.n	8000d38 <HAL_RCC_OscConfig+0x258>
 8000d30:	f043 0304 	orr.w	r3, r3, #4
 8000d34:	6223      	str	r3, [r4, #32]
 8000d36:	e7ba      	b.n	8000cae <HAL_RCC_OscConfig+0x1ce>
 8000d38:	f023 0301 	bic.w	r3, r3, #1
 8000d3c:	6223      	str	r3, [r4, #32]
 8000d3e:	6a23      	ldr	r3, [r4, #32]
 8000d40:	f023 0304 	bic.w	r3, r3, #4
 8000d44:	e7b6      	b.n	8000cb4 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d46:	f7ff fa43 	bl	80001d0 <HAL_GetTick>
 8000d4a:	eba0 0008 	sub.w	r0, r0, r8
 8000d4e:	42b0      	cmp	r0, r6
 8000d50:	d9b6      	bls.n	8000cc0 <HAL_RCC_OscConfig+0x1e0>
 8000d52:	e707      	b.n	8000b64 <HAL_RCC_OscConfig+0x84>
 8000d54:	40021000 	.word	0x40021000
 8000d58:	42420000 	.word	0x42420000
 8000d5c:	42420480 	.word	0x42420480
 8000d60:	20000008 	.word	0x20000008
 8000d64:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d68:	4b2a      	ldr	r3, [pc, #168]	; (8000e14 <HAL_RCC_OscConfig+0x334>)
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	461c      	mov	r4, r3
 8000d6e:	f002 020c 	and.w	r2, r2, #12
 8000d72:	2a08      	cmp	r2, #8
 8000d74:	d03d      	beq.n	8000df2 <HAL_RCC_OscConfig+0x312>
 8000d76:	2300      	movs	r3, #0
 8000d78:	4e27      	ldr	r6, [pc, #156]	; (8000e18 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d7a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000d7c:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d7e:	d12b      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000d80:	f7ff fa26 	bl	80001d0 <HAL_GetTick>
 8000d84:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d86:	6823      	ldr	r3, [r4, #0]
 8000d88:	0199      	lsls	r1, r3, #6
 8000d8a:	d41f      	bmi.n	8000dcc <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000d8c:	6a2b      	ldr	r3, [r5, #32]
 8000d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d92:	d105      	bne.n	8000da0 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d94:	6862      	ldr	r2, [r4, #4]
 8000d96:	68a9      	ldr	r1, [r5, #8]
 8000d98:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000da0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000da2:	6862      	ldr	r2, [r4, #4]
 8000da4:	430b      	orrs	r3, r1
 8000da6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000daa:	4313      	orrs	r3, r2
 8000dac:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000dae:	2301      	movs	r3, #1
 8000db0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000db2:	f7ff fa0d 	bl	80001d0 <HAL_GetTick>
 8000db6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000db8:	6823      	ldr	r3, [r4, #0]
 8000dba:	019a      	lsls	r2, r3, #6
 8000dbc:	f53f aea8 	bmi.w	8000b10 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dc0:	f7ff fa06 	bl	80001d0 <HAL_GetTick>
 8000dc4:	1b40      	subs	r0, r0, r5
 8000dc6:	2802      	cmp	r0, #2
 8000dc8:	d9f6      	bls.n	8000db8 <HAL_RCC_OscConfig+0x2d8>
 8000dca:	e6cb      	b.n	8000b64 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dcc:	f7ff fa00 	bl	80001d0 <HAL_GetTick>
 8000dd0:	1bc0      	subs	r0, r0, r7
 8000dd2:	2802      	cmp	r0, #2
 8000dd4:	d9d7      	bls.n	8000d86 <HAL_RCC_OscConfig+0x2a6>
 8000dd6:	e6c5      	b.n	8000b64 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000dd8:	f7ff f9fa 	bl	80001d0 <HAL_GetTick>
 8000ddc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dde:	6823      	ldr	r3, [r4, #0]
 8000de0:	019b      	lsls	r3, r3, #6
 8000de2:	f57f ae95 	bpl.w	8000b10 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000de6:	f7ff f9f3 	bl	80001d0 <HAL_GetTick>
 8000dea:	1b40      	subs	r0, r0, r5
 8000dec:	2802      	cmp	r0, #2
 8000dee:	d9f6      	bls.n	8000dde <HAL_RCC_OscConfig+0x2fe>
 8000df0:	e6b8      	b.n	8000b64 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000df2:	2801      	cmp	r0, #1
 8000df4:	f43f aeb7 	beq.w	8000b66 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8000df8:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dfa:	6a2b      	ldr	r3, [r5, #32]
 8000dfc:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000e00:	429a      	cmp	r2, r3
 8000e02:	f47f ae71 	bne.w	8000ae8 <HAL_RCC_OscConfig+0x8>
 8000e06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000e08:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000e0c:	1ac0      	subs	r0, r0, r3
 8000e0e:	bf18      	it	ne
 8000e10:	2001      	movne	r0, #1
 8000e12:	e6a8      	b.n	8000b66 <HAL_RCC_OscConfig+0x86>
 8000e14:	40021000 	.word	0x40021000
 8000e18:	42420060 	.word	0x42420060

08000e1c <HAL_RCC_GetSysClockFreq>:
{
 8000e1c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e1e:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000e20:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e22:	ac02      	add	r4, sp, #8
 8000e24:	f103 0510 	add.w	r5, r3, #16
 8000e28:	4622      	mov	r2, r4
 8000e2a:	6818      	ldr	r0, [r3, #0]
 8000e2c:	6859      	ldr	r1, [r3, #4]
 8000e2e:	3308      	adds	r3, #8
 8000e30:	c203      	stmia	r2!, {r0, r1}
 8000e32:	42ab      	cmp	r3, r5
 8000e34:	4614      	mov	r4, r2
 8000e36:	d1f7      	bne.n	8000e28 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e38:	2301      	movs	r3, #1
 8000e3a:	f88d 3004 	strb.w	r3, [sp, #4]
 8000e3e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000e40:	4911      	ldr	r1, [pc, #68]	; (8000e88 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e42:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000e46:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000e48:	f003 020c 	and.w	r2, r3, #12
 8000e4c:	2a08      	cmp	r2, #8
 8000e4e:	d117      	bne.n	8000e80 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e50:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000e54:	a806      	add	r0, sp, #24
 8000e56:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e58:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e5a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e5e:	d50c      	bpl.n	8000e7a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e60:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e62:	480a      	ldr	r0, [pc, #40]	; (8000e8c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e64:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e68:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e6a:	aa06      	add	r2, sp, #24
 8000e6c:	4413      	add	r3, r2
 8000e6e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e72:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000e76:	b007      	add	sp, #28
 8000e78:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <HAL_RCC_GetSysClockFreq+0x74>)
 8000e7c:	4350      	muls	r0, r2
 8000e7e:	e7fa      	b.n	8000e76 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000e82:	e7f8      	b.n	8000e76 <HAL_RCC_GetSysClockFreq+0x5a>
 8000e84:	08001688 	.word	0x08001688
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	007a1200 	.word	0x007a1200
 8000e90:	003d0900 	.word	0x003d0900

08000e94 <HAL_RCC_ClockConfig>:
{
 8000e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e98:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	b910      	cbnz	r0, 8000ea4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000ea4:	4a45      	ldr	r2, [pc, #276]	; (8000fbc <HAL_RCC_ClockConfig+0x128>)
 8000ea6:	6813      	ldr	r3, [r2, #0]
 8000ea8:	f003 0307 	and.w	r3, r3, #7
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d329      	bcc.n	8000f04 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000eb0:	6821      	ldr	r1, [r4, #0]
 8000eb2:	078e      	lsls	r6, r1, #30
 8000eb4:	d431      	bmi.n	8000f1a <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000eb6:	07ca      	lsls	r2, r1, #31
 8000eb8:	d444      	bmi.n	8000f44 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000eba:	4a40      	ldr	r2, [pc, #256]	; (8000fbc <HAL_RCC_ClockConfig+0x128>)
 8000ebc:	6813      	ldr	r3, [r2, #0]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	429d      	cmp	r5, r3
 8000ec4:	d367      	bcc.n	8000f96 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ec6:	6822      	ldr	r2, [r4, #0]
 8000ec8:	4d3d      	ldr	r5, [pc, #244]	; (8000fc0 <HAL_RCC_ClockConfig+0x12c>)
 8000eca:	f012 0f04 	tst.w	r2, #4
 8000ece:	d16e      	bne.n	8000fae <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ed0:	0713      	lsls	r3, r2, #28
 8000ed2:	d506      	bpl.n	8000ee2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000ed4:	686b      	ldr	r3, [r5, #4]
 8000ed6:	6922      	ldr	r2, [r4, #16]
 8000ed8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000edc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ee0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000ee2:	f7ff ff9b 	bl	8000e1c <HAL_RCC_GetSysClockFreq>
 8000ee6:	686b      	ldr	r3, [r5, #4]
 8000ee8:	4a36      	ldr	r2, [pc, #216]	; (8000fc4 <HAL_RCC_ClockConfig+0x130>)
 8000eea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000eee:	5cd3      	ldrb	r3, [r2, r3]
 8000ef0:	40d8      	lsrs	r0, r3
 8000ef2:	4b35      	ldr	r3, [pc, #212]	; (8000fc8 <HAL_RCC_ClockConfig+0x134>)
 8000ef4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000ef6:	4b35      	ldr	r3, [pc, #212]	; (8000fcc <HAL_RCC_ClockConfig+0x138>)
 8000ef8:	6818      	ldr	r0, [r3, #0]
 8000efa:	f7ff f927 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000efe:	2000      	movs	r0, #0
 8000f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f04:	6813      	ldr	r3, [r2, #0]
 8000f06:	f023 0307 	bic.w	r3, r3, #7
 8000f0a:	430b      	orrs	r3, r1
 8000f0c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f0e:	6813      	ldr	r3, [r2, #0]
 8000f10:	f003 0307 	and.w	r3, r3, #7
 8000f14:	4299      	cmp	r1, r3
 8000f16:	d1c2      	bne.n	8000e9e <HAL_RCC_ClockConfig+0xa>
 8000f18:	e7ca      	b.n	8000eb0 <HAL_RCC_ClockConfig+0x1c>
 8000f1a:	4b29      	ldr	r3, [pc, #164]	; (8000fc0 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f1c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f20:	bf1e      	ittt	ne
 8000f22:	685a      	ldrne	r2, [r3, #4]
 8000f24:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000f28:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f2a:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f2c:	bf42      	ittt	mi
 8000f2e:	685a      	ldrmi	r2, [r3, #4]
 8000f30:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000f34:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	68a0      	ldr	r0, [r4, #8]
 8000f3a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000f3e:	4302      	orrs	r2, r0
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	e7b8      	b.n	8000eb6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f44:	6862      	ldr	r2, [r4, #4]
 8000f46:	4e1e      	ldr	r6, [pc, #120]	; (8000fc0 <HAL_RCC_ClockConfig+0x12c>)
 8000f48:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f4a:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f4c:	d11b      	bne.n	8000f86 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f4e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f52:	d0a4      	beq.n	8000e9e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f54:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f56:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f5a:	f023 0303 	bic.w	r3, r3, #3
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000f62:	f7ff f935 	bl	80001d0 <HAL_GetTick>
 8000f66:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f68:	6873      	ldr	r3, [r6, #4]
 8000f6a:	6862      	ldr	r2, [r4, #4]
 8000f6c:	f003 030c 	and.w	r3, r3, #12
 8000f70:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000f74:	d0a1      	beq.n	8000eba <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f76:	f7ff f92b 	bl	80001d0 <HAL_GetTick>
 8000f7a:	1bc0      	subs	r0, r0, r7
 8000f7c:	4540      	cmp	r0, r8
 8000f7e:	d9f3      	bls.n	8000f68 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000f80:	2003      	movs	r0, #3
}
 8000f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f86:	2a02      	cmp	r2, #2
 8000f88:	d102      	bne.n	8000f90 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f8a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000f8e:	e7e0      	b.n	8000f52 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f90:	f013 0f02 	tst.w	r3, #2
 8000f94:	e7dd      	b.n	8000f52 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f96:	6813      	ldr	r3, [r2, #0]
 8000f98:	f023 0307 	bic.w	r3, r3, #7
 8000f9c:	432b      	orrs	r3, r5
 8000f9e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fa0:	6813      	ldr	r3, [r2, #0]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	429d      	cmp	r5, r3
 8000fa8:	f47f af79 	bne.w	8000e9e <HAL_RCC_ClockConfig+0xa>
 8000fac:	e78b      	b.n	8000ec6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fae:	686b      	ldr	r3, [r5, #4]
 8000fb0:	68e1      	ldr	r1, [r4, #12]
 8000fb2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fb6:	430b      	orrs	r3, r1
 8000fb8:	606b      	str	r3, [r5, #4]
 8000fba:	e789      	b.n	8000ed0 <HAL_RCC_ClockConfig+0x3c>
 8000fbc:	40022000 	.word	0x40022000
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	08001698 	.word	0x08001698
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000004 	.word	0x20000004

08000fd0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000fda:	5cd3      	ldrb	r3, [r2, r3]
 8000fdc:	4a03      	ldr	r2, [pc, #12]	; (8000fec <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000fde:	6810      	ldr	r0, [r2, #0]
}
 8000fe0:	40d8      	lsrs	r0, r3
 8000fe2:	4770      	bx	lr
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	080016a8 	.word	0x080016a8
 8000fec:	20000008 	.word	0x20000008

08000ff0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000ffa:	5cd3      	ldrb	r3, [r2, r3]
 8000ffc:	4a03      	ldr	r2, [pc, #12]	; (800100c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000ffe:	6810      	ldr	r0, [r2, #0]
}
 8001000:	40d8      	lsrs	r0, r3
 8001002:	4770      	bx	lr
 8001004:	40021000 	.word	0x40021000
 8001008:	080016a8 	.word	0x080016a8
 800100c:	20000008 	.word	0x20000008

08001010 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001010:	6803      	ldr	r3, [r0, #0]
{
 8001012:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001016:	07d9      	lsls	r1, r3, #31
{
 8001018:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800101a:	d520      	bpl.n	800105e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800101c:	4c35      	ldr	r4, [pc, #212]	; (80010f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800101e:	69e3      	ldr	r3, [r4, #28]
 8001020:	00da      	lsls	r2, r3, #3
 8001022:	d432      	bmi.n	800108a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001024:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001026:	69e3      	ldr	r3, [r4, #28]
 8001028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102c:	61e3      	str	r3, [r4, #28]
 800102e:	69e3      	ldr	r3, [r4, #28]
 8001030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001038:	4e2f      	ldr	r6, [pc, #188]	; (80010f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800103a:	6833      	ldr	r3, [r6, #0]
 800103c:	05db      	lsls	r3, r3, #23
 800103e:	d526      	bpl.n	800108e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001040:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001042:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001046:	d136      	bne.n	80010b6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001048:	6a23      	ldr	r3, [r4, #32]
 800104a:	686a      	ldr	r2, [r5, #4]
 800104c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001050:	4313      	orrs	r3, r2
 8001052:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001054:	b11f      	cbz	r7, 800105e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001056:	69e3      	ldr	r3, [r4, #28]
 8001058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800105c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800105e:	6828      	ldr	r0, [r5, #0]
 8001060:	0783      	lsls	r3, r0, #30
 8001062:	d506      	bpl.n	8001072 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001064:	4a23      	ldr	r2, [pc, #140]	; (80010f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001066:	68a9      	ldr	r1, [r5, #8]
 8001068:	6853      	ldr	r3, [r2, #4]
 800106a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800106e:	430b      	orrs	r3, r1
 8001070:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001072:	f010 0010 	ands.w	r0, r0, #16
 8001076:	d01b      	beq.n	80010b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001078:	4a1e      	ldr	r2, [pc, #120]	; (80010f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800107a:	68e9      	ldr	r1, [r5, #12]
 800107c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800107e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001080:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001084:	430b      	orrs	r3, r1
 8001086:	6053      	str	r3, [r2, #4]
 8001088:	e012      	b.n	80010b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800108a:	2700      	movs	r7, #0
 800108c:	e7d4      	b.n	8001038 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800108e:	6833      	ldr	r3, [r6, #0]
 8001090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001094:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001096:	f7ff f89b 	bl	80001d0 <HAL_GetTick>
 800109a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800109c:	6833      	ldr	r3, [r6, #0]
 800109e:	05d8      	lsls	r0, r3, #23
 80010a0:	d4ce      	bmi.n	8001040 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010a2:	f7ff f895 	bl	80001d0 <HAL_GetTick>
 80010a6:	eba0 0008 	sub.w	r0, r0, r8
 80010aa:	2864      	cmp	r0, #100	; 0x64
 80010ac:	d9f6      	bls.n	800109c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80010ae:	2003      	movs	r0, #3
}
 80010b0:	b002      	add	sp, #8
 80010b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80010b6:	686a      	ldr	r2, [r5, #4]
 80010b8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80010bc:	4293      	cmp	r3, r2
 80010be:	d0c3      	beq.n	8001048 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80010c0:	2001      	movs	r0, #1
 80010c2:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80010c4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80010c6:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80010c8:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80010ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80010ce:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80010d0:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80010d2:	07d9      	lsls	r1, r3, #31
 80010d4:	d5b8      	bpl.n	8001048 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80010d6:	f7ff f87b 	bl	80001d0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010da:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80010de:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e0:	6a23      	ldr	r3, [r4, #32]
 80010e2:	079a      	lsls	r2, r3, #30
 80010e4:	d4b0      	bmi.n	8001048 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010e6:	f7ff f873 	bl	80001d0 <HAL_GetTick>
 80010ea:	1b80      	subs	r0, r0, r6
 80010ec:	4540      	cmp	r0, r8
 80010ee:	d9f7      	bls.n	80010e0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80010f0:	e7dd      	b.n	80010ae <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40007000 	.word	0x40007000
 80010fc:	42420440 	.word	0x42420440

08001100 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001100:	b538      	push	{r3, r4, r5, lr}
 8001102:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001104:	6803      	ldr	r3, [r0, #0]
 8001106:	68c1      	ldr	r1, [r0, #12]
 8001108:	691a      	ldr	r2, [r3, #16]
 800110a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800110e:	430a      	orrs	r2, r1
 8001110:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001112:	6882      	ldr	r2, [r0, #8]
 8001114:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001116:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001118:	4302      	orrs	r2, r0
 800111a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800111c:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8001120:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001124:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001126:	430a      	orrs	r2, r1
 8001128:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800112a:	695a      	ldr	r2, [r3, #20]
 800112c:	69a1      	ldr	r1, [r4, #24]
 800112e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001132:	430a      	orrs	r2, r1
 8001134:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001136:	4a0e      	ldr	r2, [pc, #56]	; (8001170 <UART_SetConfig+0x70>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d115      	bne.n	8001168 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800113c:	f7ff ff58 	bl	8000ff0 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001140:	2319      	movs	r3, #25
 8001142:	4358      	muls	r0, r3
 8001144:	6863      	ldr	r3, [r4, #4]
 8001146:	2264      	movs	r2, #100	; 0x64
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	fbb0 f0f3 	udiv	r0, r0, r3
 800114e:	fbb0 f1f2 	udiv	r1, r0, r2
 8001152:	fb02 0311 	mls	r3, r2, r1, r0
 8001156:	011b      	lsls	r3, r3, #4
 8001158:	3332      	adds	r3, #50	; 0x32
 800115a:	fbb3 f3f2 	udiv	r3, r3, r2
 800115e:	6825      	ldr	r5, [r4, #0]
 8001160:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001164:	60ab      	str	r3, [r5, #8]
 8001166:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8001168:	f7ff ff32 	bl	8000fd0 <HAL_RCC_GetPCLK1Freq>
 800116c:	e7e8      	b.n	8001140 <UART_SetConfig+0x40>
 800116e:	bf00      	nop
 8001170:	40013800 	.word	0x40013800

08001174 <HAL_UART_Init>:
{
 8001174:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001176:	4604      	mov	r4, r0
 8001178:	b340      	cbz	r0, 80011cc <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800117a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800117e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001182:	b91b      	cbnz	r3, 800118c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001184:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001188:	f000 f9d4 	bl	8001534 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800118c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800118e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001190:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001194:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001196:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001198:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800119c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800119e:	f7ff ffaf 	bl	8001100 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80011a2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011a4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80011a6:	691a      	ldr	r2, [r3, #16]
 80011a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80011ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80011ae:	695a      	ldr	r2, [r3, #20]
 80011b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80011b4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80011bc:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80011be:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011c0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80011c2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80011c6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80011ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80011cc:	2001      	movs	r0, #1
}
 80011ce:	bd10      	pop	{r4, pc}

080011d0 <EVMS2_init>:
// code for pump and fan to be added after discussion

uint16_t val[2]; // val[0] is brakes angle, val[1] is brakes pressure
void EVMS2_init(void)
{  
    HAL_ADC_Start_DMA(&hadc1,val,2);
 80011d0:	2202      	movs	r2, #2
 80011d2:	4902      	ldr	r1, [pc, #8]	; (80011dc <EVMS2_init+0xc>)
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <EVMS2_init+0x10>)
 80011d6:	f7ff b8f9 	b.w	80003cc <HAL_ADC_Start_DMA>
 80011da:	bf00      	nop
 80011dc:	2000005c 	.word	0x2000005c
 80011e0:	2000002c 	.word	0x2000002c

080011e4 <read_brakes_angle_sensor>:
uint16_t read_brakes_angle_sensor(void)
{
    uint16_t brakes_read=0;
	for(int i=0;i<10;i++)
	{
		brakes_read+=val[0];
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <read_brakes_angle_sensor+0x14>)
	}
	return (brakes_read/10);
 80011e6:	8818      	ldrh	r0, [r3, #0]
}
 80011e8:	230a      	movs	r3, #10
	return (brakes_read/10);
 80011ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80011ee:	0040      	lsls	r0, r0, #1
 80011f0:	b280      	uxth	r0, r0
}
 80011f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80011f6:	4770      	bx	lr
 80011f8:	2000005c 	.word	0x2000005c

080011fc <isError>:

uint8_t isError(void)
{
 80011fc:	b510      	push	{r4, lr}
    if(HAL_GPIO_ReadPin(BMS_FB_GPIO_Port,BMS_FB_Pin)==1)
 80011fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001202:	4811      	ldr	r0, [pc, #68]	; (8001248 <isError+0x4c>)
 8001204:	f7ff fc60 	bl	8000ac8 <HAL_GPIO_ReadPin>
 8001208:	2801      	cmp	r0, #1
 800120a:	d101      	bne.n	8001210 <isError+0x14>
    {
        return 1; // error of bms so shutdown must be opened
 800120c:	2001      	movs	r0, #1
 800120e:	bd10      	pop	{r4, pc}
    }
    if(HAL_GPIO_ReadPin(IMD_RELAY_FB_GPIO_Port,IMD_RELAY_FB_Pin)!= HAL_GPIO_ReadPin(IMD_FB_GPIO_Port,IMD_FB_Pin))
 8001210:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <isError+0x50>)
 8001216:	f7ff fc57 	bl	8000ac8 <HAL_GPIO_ReadPin>
 800121a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800121e:	4604      	mov	r4, r0
 8001220:	480a      	ldr	r0, [pc, #40]	; (800124c <isError+0x50>)
 8001222:	f7ff fc51 	bl	8000ac8 <HAL_GPIO_ReadPin>
 8001226:	4284      	cmp	r4, r0
 8001228:	d1f0      	bne.n	800120c <isError+0x10>
    {
        return 1;  // the imd value doesnt affect its relay so sdc must be opened
    }
    if(HAL_GPIO_ReadPin(BSPD_RELAY_FB_GPIO_Port,BSPD_RELAY_FB_Pin)!= HAL_GPIO_ReadPin(BSPD_FB_GPIO_Port,BSPD_FB_Pin))
 800122a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800122e:	4807      	ldr	r0, [pc, #28]	; (800124c <isError+0x50>)
 8001230:	f7ff fc4a 	bl	8000ac8 <HAL_GPIO_ReadPin>
 8001234:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001238:	4604      	mov	r4, r0
 800123a:	4804      	ldr	r0, [pc, #16]	; (800124c <isError+0x50>)
 800123c:	f7ff fc44 	bl	8000ac8 <HAL_GPIO_ReadPin>
        return 1; // error of bms so shutdown must be opened
 8001240:	1a20      	subs	r0, r4, r0
 8001242:	bf18      	it	ne
 8001244:	2001      	movne	r0, #1
        return 1;// bspd value doesnt affect its relay so sdc must be opened
    }

    return 0; // no errors 

}
 8001246:	bd10      	pop	{r4, pc}
 8001248:	40010800 	.word	0x40010800
 800124c:	40010c00 	.word	0x40010c00

08001250 <Error_Action>:
    }
}


void Error_Action(void)
{
 8001250:	b508      	push	{r3, lr}
    //open the shutdown circuit and terminate
    HAL_GPIO_WritePin(EVMS_RELAY_GPIO_Port,EVMS_RELAY_Pin,0);
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001258:	4801      	ldr	r0, [pc, #4]	; (8001260 <Error_Action+0x10>)
 800125a:	f7ff fc3b 	bl	8000ad4 <HAL_GPIO_WritePin>
 800125e:	e7fe      	b.n	800125e <Error_Action+0xe>
 8001260:	40010800 	.word	0x40010800

08001264 <loop>:
{
 8001264:	b508      	push	{r3, lr}
    if(read_brakes_angle_sensor()>=BRAKES_LIGHT_VALUE) // illuminate the brakes light if brake is pressed
 8001266:	f7ff ffbd 	bl	80011e4 <read_brakes_angle_sensor>
 800126a:	28c7      	cmp	r0, #199	; 0xc7
        HAL_GPIO_WritePin(BRAKE_LIGHT_RELAY_GPIO_Port,BRAKE_LIGHT_RELAY_Pin,1);
 800126c:	bf8c      	ite	hi
 800126e:	2201      	movhi	r2, #1
        HAL_GPIO_WritePin(BRAKE_LIGHT_RELAY_GPIO_Port,BRAKE_LIGHT_RELAY_Pin,0);
 8001270:	2200      	movls	r2, #0
 8001272:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <loop+0x28>)
 8001278:	f7ff fc2c 	bl	8000ad4 <HAL_GPIO_WritePin>
    if(isError()==1)
 800127c:	f7ff ffbe 	bl	80011fc <isError>
 8001280:	2801      	cmp	r0, #1
 8001282:	d101      	bne.n	8001288 <loop+0x24>
        Error_Action();
 8001284:	f7ff ffe4 	bl	8001250 <Error_Action>
 8001288:	bd08      	pop	{r3, pc}
 800128a:	bf00      	nop
 800128c:	40010800 	.word	0x40010800

08001290 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001290:	2228      	movs	r2, #40	; 0x28
{
 8001292:	b510      	push	{r4, lr}
 8001294:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001296:	eb0d 0002 	add.w	r0, sp, r2
 800129a:	2100      	movs	r1, #0
 800129c:	f000 f9e0 	bl	8001660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a0:	2214      	movs	r2, #20
 80012a2:	2100      	movs	r1, #0
 80012a4:	eb0d 0002 	add.w	r0, sp, r2
 80012a8:	f000 f9da 	bl	8001660 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012ac:	2100      	movs	r1, #0
 80012ae:	2210      	movs	r2, #16
 80012b0:	a801      	add	r0, sp, #4
 80012b2:	f000 f9d5 	bl	8001660 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ba:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012bc:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012be:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c0:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c6:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012c8:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ca:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012cc:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ce:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d0:	f7ff fc06 	bl	8000ae0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d4:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012da:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012dc:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012de:	4621      	mov	r1, r4
 80012e0:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e2:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012e4:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e8:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012ea:	f7ff fdd3 	bl	8000e94 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80012ee:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f2:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012f4:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80012f6:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f8:	f7ff fe8a 	bl	8001010 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80012fc:	b014      	add	sp, #80	; 0x50
 80012fe:	bd10      	pop	{r4, pc}

08001300 <main>:
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
  HAL_Init();
 8001304:	f7fe ff46 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8001308:	f7ff ffc2 	bl	8001290 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	2210      	movs	r2, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	4d4b      	ldr	r5, [pc, #300]	; (800143c <main+0x13c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	2100      	movs	r1, #0
 8001312:	eb0d 0002 	add.w	r0, sp, r2
 8001316:	f000 f9a3 	bl	8001660 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800131a:	69ab      	ldr	r3, [r5, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BRAKE_LIGHT_RELAY_Pin|FAN_RELAY_Pin|PUMP_RELAY_Pin|EVMS_RELAY_Pin, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800131e:	f043 0310 	orr.w	r3, r3, #16
 8001322:	61ab      	str	r3, [r5, #24]
 8001324:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, BRAKE_LIGHT_RELAY_Pin|FAN_RELAY_Pin|PUMP_RELAY_Pin|EVMS_RELAY_Pin, GPIO_PIN_RESET);
 8001326:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132a:	f003 0310 	and.w	r3, r3, #16
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001332:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, BRAKE_LIGHT_RELAY_Pin|FAN_RELAY_Pin|PUMP_RELAY_Pin|EVMS_RELAY_Pin, GPIO_PIN_RESET);
 8001334:	4842      	ldr	r0, [pc, #264]	; (8001440 <main+0x140>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001336:	f043 0320 	orr.w	r3, r3, #32
 800133a:	61ab      	str	r3, [r5, #24]
 800133c:	69ab      	ldr	r3, [r5, #24]

  /*Configure GPIO pins : BSPD_FB_Pin BSPD_RELAY_FB_Pin IMD_FB_Pin IMD_RELAY_FB_Pin */
  GPIO_InitStruct.Pin = BSPD_FB_Pin|BSPD_RELAY_FB_Pin|IMD_FB_Pin|IMD_RELAY_FB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001340:	f003 0320 	and.w	r3, r3, #32
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001348:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : BMS_FB_Pin */
  GPIO_InitStruct.Pin = BMS_FB_Pin;
 800134a:	f44f 7980 	mov.w	r9, #256	; 0x100
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	f043 0304 	orr.w	r3, r3, #4
 8001352:	61ab      	str	r3, [r5, #24]
 8001354:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BMS_FB_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : BRAKE_LIGHT_RELAY_Pin FAN_RELAY_Pin PUMP_RELAY_Pin EVMS_RELAY_Pin */
  GPIO_InitStruct.Pin = BRAKE_LIGHT_RELAY_Pin|FAN_RELAY_Pin|PUMP_RELAY_Pin|EVMS_RELAY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	9302      	str	r3, [sp, #8]
 800135e:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001360:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	f043 0308 	orr.w	r3, r3, #8
 800136a:	61ab      	str	r3, [r5, #24]
 800136c:	69ab      	ldr	r3, [r5, #24]
  hadc1.Instance = ADC1;
 800136e:	4e35      	ldr	r6, [pc, #212]	; (8001444 <main+0x144>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	9303      	str	r3, [sp, #12]
 8001376:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, BRAKE_LIGHT_RELAY_Pin|FAN_RELAY_Pin|PUMP_RELAY_Pin|EVMS_RELAY_Pin, GPIO_PIN_RESET);
 8001378:	f7ff fbac 	bl	8000ad4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BSPD_FB_Pin|BSPD_RELAY_FB_Pin|IMD_FB_Pin|IMD_RELAY_FB_Pin;
 800137c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	a904      	add	r1, sp, #16
 8001382:	4831      	ldr	r0, [pc, #196]	; (8001448 <main+0x148>)
  GPIO_InitStruct.Pin = BSPD_FB_Pin|BSPD_RELAY_FB_Pin|IMD_FB_Pin|IMD_RELAY_FB_Pin;
 8001384:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001386:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138a:	f7ff fabb 	bl	8000904 <HAL_GPIO_Init>
  HAL_GPIO_Init(BMS_FB_GPIO_Port, &GPIO_InitStruct);
 800138e:	a904      	add	r1, sp, #16
 8001390:	482b      	ldr	r0, [pc, #172]	; (8001440 <main+0x140>)
  GPIO_InitStruct.Pin = BMS_FB_Pin;
 8001392:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001396:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BMS_FB_GPIO_Port, &GPIO_InitStruct);
 800139a:	f7ff fab3 	bl	8000904 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BRAKE_LIGHT_RELAY_Pin|FAN_RELAY_Pin|PUMP_RELAY_Pin|EVMS_RELAY_Pin;
 800139e:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	a904      	add	r1, sp, #16
 80013a4:	4826      	ldr	r0, [pc, #152]	; (8001440 <main+0x140>)
  GPIO_InitStruct.Pin = BRAKE_LIGHT_RELAY_Pin|FAN_RELAY_Pin|PUMP_RELAY_Pin|EVMS_RELAY_Pin;
 80013a6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f7ff faa8 	bl	8000904 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 80013b4:	4b25      	ldr	r3, [pc, #148]	; (800144c <main+0x14c>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013b6:	4630      	mov	r0, r6
  hadc1.Instance = ADC1;
 80013b8:	6033      	str	r3, [r6, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ba:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 80013be:	9404      	str	r4, [sp, #16]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013c0:	61f3      	str	r3, [r6, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013c2:	9405      	str	r4, [sp, #20]
 80013c4:	9406      	str	r4, [sp, #24]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013c6:	f8c6 9008 	str.w	r9, [r6, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013ca:	7337      	strb	r7, [r6, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013cc:	7534      	strb	r4, [r6, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ce:	6074      	str	r4, [r6, #4]
  hadc1.Init.NbrOfConversion = 2;
 80013d0:	f8c6 8010 	str.w	r8, [r6, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013d4:	f7ff f8aa 	bl	800052c <HAL_ADC_Init>
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80013d8:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013da:	a904      	add	r1, sp, #16
 80013dc:	4630      	mov	r0, r6
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80013de:	9306      	str	r3, [sp, #24]
  sConfig.Channel = ADC_CHANNEL_0;
 80013e0:	9404      	str	r4, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013e2:	9705      	str	r7, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e4:	f7fe ff36 	bl	8000254 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e8:	a904      	add	r1, sp, #16
 80013ea:	4630      	mov	r0, r6
  sConfig.Channel = ADC_CHANNEL_1;
 80013ec:	9704      	str	r7, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013ee:	f8cd 8014 	str.w	r8, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f2:	f7fe ff2f 	bl	8000254 <HAL_ADC_ConfigChannel>
  huart2.Init.BaudRate = 9600;
 80013f6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart2.Instance = USART2;
 80013fa:	4815      	ldr	r0, [pc, #84]	; (8001450 <main+0x150>)
  huart2.Init.BaudRate = 9600;
 80013fc:	4a15      	ldr	r2, [pc, #84]	; (8001454 <main+0x154>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013fe:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 9600;
 8001400:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001404:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001406:	60c4      	str	r4, [r0, #12]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001408:	6143      	str	r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 800140a:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140c:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800140e:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001410:	f7ff feb0 	bl	8001174 <HAL_UART_Init>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 7, 7);
 8001414:	2207      	movs	r2, #7
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001416:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 7, 7);
 8001418:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 800141a:	433b      	orrs	r3, r7
 800141c:	616b      	str	r3, [r5, #20]
 800141e:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 7, 7);
 8001420:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001422:	403b      	ands	r3, r7
 8001424:	9304      	str	r3, [sp, #16]
 8001426:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 7, 7);
 8001428:	f7ff f912 	bl	8000650 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800142c:	200b      	movs	r0, #11
 800142e:	f7ff f943 	bl	80006b8 <HAL_NVIC_EnableIRQ>
  EVMS2_init();
 8001432:	f7ff fecd 	bl	80011d0 <EVMS2_init>
    loop();
 8001436:	f7ff ff15 	bl	8001264 <loop>
 800143a:	e7fc      	b.n	8001436 <main+0x136>
 800143c:	40021000 	.word	0x40021000
 8001440:	40010800 	.word	0x40010800
 8001444:	2000002c 	.word	0x2000002c
 8001448:	40010c00 	.word	0x40010c00
 800144c:	40012400 	.word	0x40012400
 8001450:	200000a4 	.word	0x200000a4
 8001454:	40004400 	.word	0x40004400

08001458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001458:	4770      	bx	lr
	...

0800145c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800145c:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <HAL_MspInit+0x3c>)
{
 800145e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001460:	699a      	ldr	r2, [r3, #24]
 8001462:	f042 0201 	orr.w	r2, r2, #1
 8001466:	619a      	str	r2, [r3, #24]
 8001468:	699a      	ldr	r2, [r3, #24]
 800146a:	f002 0201 	and.w	r2, r2, #1
 800146e:	9200      	str	r2, [sp, #0]
 8001470:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	69da      	ldr	r2, [r3, #28]
 8001474:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001478:	61da      	str	r2, [r3, #28]
 800147a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800147c:	4a07      	ldr	r2, [pc, #28]	; (800149c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001486:	6853      	ldr	r3, [r2, #4]
 8001488:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800148c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001490:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001492:	b002      	add	sp, #8
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000
 800149c:	40010000 	.word	0x40010000

080014a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014a0:	b530      	push	{r4, r5, lr}
 80014a2:	4605      	mov	r5, r0
 80014a4:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a6:	2210      	movs	r2, #16
 80014a8:	2100      	movs	r1, #0
 80014aa:	a802      	add	r0, sp, #8
 80014ac:	f000 f8d8 	bl	8001660 <memset>
  if(hadc->Instance==ADC1)
 80014b0:	682a      	ldr	r2, [r5, #0]
 80014b2:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <HAL_ADC_MspInit+0x84>)
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d133      	bne.n	8001520 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014b8:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80014bc:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = BREAKES_ANGLE_Pin|BRAKES_PRESSURE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	481a      	ldr	r0, [pc, #104]	; (8001528 <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014c4:	619a      	str	r2, [r3, #24]
 80014c6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014ca:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80014ce:	9200      	str	r2, [sp, #0]
 80014d0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80014d4:	4c15      	ldr	r4, [pc, #84]	; (800152c <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	f042 0204 	orr.w	r2, r2, #4
 80014da:	619a      	str	r2, [r3, #24]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	9301      	str	r3, [sp, #4]
 80014e4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = BREAKES_ANGLE_Pin|BRAKES_PRESSURE_Pin;
 80014e6:	2303      	movs	r3, #3
 80014e8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ea:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ec:	f7ff fa0a 	bl	8000904 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014f0:	2280      	movs	r2, #128	; 0x80
 80014f2:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014f8:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Instance = DMA1_Channel1;
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <HAL_ADC_MspInit+0x90>)
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001500:	6162      	str	r2, [r4, #20]
    hdma_adc1.Instance = DMA1_Channel1;
 8001502:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001504:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001506:	2300      	movs	r3, #0
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001508:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800150a:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800150c:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800150e:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001510:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001512:	f7ff f8f5 	bl	8000700 <HAL_DMA_Init>
 8001516:	b108      	cbz	r0, 800151c <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 8001518:	f7ff ff9e 	bl	8001458 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800151c:	622c      	str	r4, [r5, #32]
 800151e:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001520:	b007      	add	sp, #28
 8001522:	bd30      	pop	{r4, r5, pc}
 8001524:	40012400 	.word	0x40012400
 8001528:	40010800 	.word	0x40010800
 800152c:	20000060 	.word	0x20000060
 8001530:	40020008 	.word	0x40020008

08001534 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001534:	b510      	push	{r4, lr}
 8001536:	4604      	mov	r4, r0
 8001538:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153a:	2210      	movs	r2, #16
 800153c:	2100      	movs	r1, #0
 800153e:	a802      	add	r0, sp, #8
 8001540:	f000 f88e 	bl	8001660 <memset>
  if(huart->Instance==USART2)
 8001544:	6822      	ldr	r2, [r4, #0]
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <HAL_UART_MspInit+0x6c>)
 8001548:	429a      	cmp	r2, r3
 800154a:	d126      	bne.n	800159a <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800154c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001550:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001552:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8001554:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001558:	61da      	str	r2, [r3, #28]
 800155a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155c:	4811      	ldr	r0, [pc, #68]	; (80015a4 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800155e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001562:	9200      	str	r2, [sp, #0]
 8001564:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	699a      	ldr	r2, [r3, #24]
 8001568:	f042 0204 	orr.w	r2, r2, #4
 800156c:	619a      	str	r2, [r3, #24]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	9301      	str	r3, [sp, #4]
 8001576:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001578:	2304      	movs	r3, #4
 800157a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f7ff f9be 	bl	8000904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001588:	2308      	movs	r3, #8
 800158a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158c:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158e:	a902      	add	r1, sp, #8
 8001590:	4804      	ldr	r0, [pc, #16]	; (80015a4 <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001592:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001596:	f7ff f9b5 	bl	8000904 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800159a:	b006      	add	sp, #24
 800159c:	bd10      	pop	{r4, pc}
 800159e:	bf00      	nop
 80015a0:	40004400 	.word	0x40004400
 80015a4:	40010800 	.word	0x40010800

080015a8 <NMI_Handler>:
 80015a8:	4770      	bx	lr

080015aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015aa:	e7fe      	b.n	80015aa <HardFault_Handler>

080015ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ac:	e7fe      	b.n	80015ac <MemManage_Handler>

080015ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ae:	e7fe      	b.n	80015ae <BusFault_Handler>

080015b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b0:	e7fe      	b.n	80015b0 <UsageFault_Handler>

080015b2 <SVC_Handler>:
 80015b2:	4770      	bx	lr

080015b4 <DebugMon_Handler>:
 80015b4:	4770      	bx	lr

080015b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b6:	4770      	bx	lr

080015b8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b8:	f7fe bdfe 	b.w	80001b8 <HAL_IncTick>

080015bc <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015bc:	4801      	ldr	r0, [pc, #4]	; (80015c4 <DMA1_Channel1_IRQHandler+0x8>)
 80015be:	f7ff b90d 	b.w	80007dc <HAL_DMA_IRQHandler>
 80015c2:	bf00      	nop
 80015c4:	20000060 	.word	0x20000060

080015c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015c8:	4770      	bx	lr
	...

080015cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015cc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015ce:	e003      	b.n	80015d8 <LoopCopyDataInit>

080015d0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015d2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015d4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015d6:	3104      	adds	r1, #4

080015d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015d8:	480a      	ldr	r0, [pc, #40]	; (8001604 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015dc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015de:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015e0:	d3f6      	bcc.n	80015d0 <CopyDataInit>
  ldr r2, =_sbss
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80015e4:	e002      	b.n	80015ec <LoopFillZerobss>

080015e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80015e8:	f842 3b04 	str.w	r3, [r2], #4

080015ec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80015ee:	429a      	cmp	r2, r3
  bcc FillZerobss
 80015f0:	d3f9      	bcc.n	80015e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015f2:	f7ff ffe9 	bl	80015c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015f6:	f000 f80f 	bl	8001618 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015fa:	f7ff fe81 	bl	8001300 <main>
  bx lr
 80015fe:	4770      	bx	lr
  ldr r3, =_sidata
 8001600:	080016b8 	.word	0x080016b8
  ldr r0, =_sdata
 8001604:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001608:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800160c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001610:	200000e4 	.word	0x200000e4

08001614 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001614:	e7fe      	b.n	8001614 <ADC1_2_IRQHandler>
	...

08001618 <__libc_init_array>:
 8001618:	b570      	push	{r4, r5, r6, lr}
 800161a:	2500      	movs	r5, #0
 800161c:	4e0c      	ldr	r6, [pc, #48]	; (8001650 <__libc_init_array+0x38>)
 800161e:	4c0d      	ldr	r4, [pc, #52]	; (8001654 <__libc_init_array+0x3c>)
 8001620:	1ba4      	subs	r4, r4, r6
 8001622:	10a4      	asrs	r4, r4, #2
 8001624:	42a5      	cmp	r5, r4
 8001626:	d109      	bne.n	800163c <__libc_init_array+0x24>
 8001628:	f000 f822 	bl	8001670 <_init>
 800162c:	2500      	movs	r5, #0
 800162e:	4e0a      	ldr	r6, [pc, #40]	; (8001658 <__libc_init_array+0x40>)
 8001630:	4c0a      	ldr	r4, [pc, #40]	; (800165c <__libc_init_array+0x44>)
 8001632:	1ba4      	subs	r4, r4, r6
 8001634:	10a4      	asrs	r4, r4, #2
 8001636:	42a5      	cmp	r5, r4
 8001638:	d105      	bne.n	8001646 <__libc_init_array+0x2e>
 800163a:	bd70      	pop	{r4, r5, r6, pc}
 800163c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001640:	4798      	blx	r3
 8001642:	3501      	adds	r5, #1
 8001644:	e7ee      	b.n	8001624 <__libc_init_array+0xc>
 8001646:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800164a:	4798      	blx	r3
 800164c:	3501      	adds	r5, #1
 800164e:	e7f2      	b.n	8001636 <__libc_init_array+0x1e>
 8001650:	080016b0 	.word	0x080016b0
 8001654:	080016b0 	.word	0x080016b0
 8001658:	080016b0 	.word	0x080016b0
 800165c:	080016b4 	.word	0x080016b4

08001660 <memset>:
 8001660:	4603      	mov	r3, r0
 8001662:	4402      	add	r2, r0
 8001664:	4293      	cmp	r3, r2
 8001666:	d100      	bne.n	800166a <memset+0xa>
 8001668:	4770      	bx	lr
 800166a:	f803 1b01 	strb.w	r1, [r3], #1
 800166e:	e7f9      	b.n	8001664 <memset+0x4>

08001670 <_init>:
 8001670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001672:	bf00      	nop
 8001674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001676:	bc08      	pop	{r3}
 8001678:	469e      	mov	lr, r3
 800167a:	4770      	bx	lr

0800167c <_fini>:
 800167c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800167e:	bf00      	nop
 8001680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001682:	bc08      	pop	{r3}
 8001684:	469e      	mov	lr, r3
 8001686:	4770      	bx	lr
